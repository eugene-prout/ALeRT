program ::= extern_list decl_list 
      | decl_list

extern_list ::= extern extern_list_prime
extern_list_prime ::= extern extern_list_prime
            | epsilon
extern ::= "extern" type_spec IDENT "(" params ")" ";"

decl_list ::= decl decl_list_prime
decl_list_prime ::= decl decl_list_prime
                  |     epsilon
decl ::= var_decl 
      |  fun_decl
var_decl ::= var_type IDENT ";" 
type_spec ::= "void"
            |  var_type           
var_type  ::= "int" 
            |  "float" 
            |  "bool"
fun_decl ::= type_spec IDENT "(" params ")" block

params ::= param_list  
      |  "void" 
      | epsilon
param_list ::= param param_list_prime
param_list_prime ::= "," param param_list_prime
            | epsilon
param ::= var_type IDENT

block ::= "{" local_decls stmt_list "}"

local_decls ::= local_decl local_decls
            |  epsilon
local_decl ::= var_type IDENT ";"

stmt_list ::= stmt stmt_list
            | epsilon

stmt ::= expr_stmt
      |  block
      |  if_stmt
      |  while_stmt
      |  return_stmt
expr_stmt ::= expr ";"
            |  ";"
while_stmt ::= "while" "(" expr ")" stmt
if_stmt ::= "if" "(" expr ")" block else_stmt
else_stmt  ::= "else" block
            |  epsilon
return_stmt ::= "return" return_body
return_body ::= expr ";"
            | ";"      
            
expr ::= IDENT "=" expr
      | orstmt

orstmt ::= andstmt orstmt_prime
orstmt_prime ::= "||" andstmt orstmt_prime 
      | epsilon

andstmt ::= equality andstmt_prime
andstmt_prime ::= "&&" equality andstmt_prime     
      | epsilon                                       

equality ::= relational equality_prime
equality_prime ::= "==" relational equality_prime
      | "!=" relational equality_prime
      | epsilon

relational ::= sum relational_prime
relational_prime ::= "<=" sum relational_prime
      | "<" sum relational_prime
      | ">=" sum relational_prime
      | ">" sum relational_prime
      | epsilon

sum ::=  factor sum_prime
sum_prime ::= "+" factor sum_prime
      | "-" factor sum_prime
      | epsilon

factor ::=  negation factor_prime
factor_prime ::= "*" negation factor_prime
      | "/" negation factor_prime
      | "%" negation factor_prime
      | epsilon
      
negation ::= "-" negation | "!" negation
      | parens

parens ::= "(" expr ")"
      | IDENT function_args
      | INT_LIT | FLOAT_LIT | BOOL_LIT  

function_args ::= "(" args ")"
      | epsilon

args ::= arg_list 
      |  epsilon
arg_list ::= expr arg_list_prime     
arg_list_prime ::= "," expr arg_list_prime
      | epsilon